/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package tiket;

import tiket.*;
import com.mysql.jdbc.Connection; // //digunnakan untuk membuat koneksi ke database
import java.sql.ResultSet; // Kelas ini khusus untuk menyimpan hasil pencarian dari database.
import java.sql.SQLException; // kelas yang digunakan untuk memberi peringatan saat ada kesalahan
import java.sql.Statement; // digunakan untuk mengendalikan database dan melakukan berbagai operasi pada data di dalamnya
import javax.swing.JOptionPane; // kode ini digunakan untuk menampilkan dialog grafis, seperti kotak pesan, input, atau konfirmasi di aplikasi GUI.
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
/**
  * @author DELL
 */
public class Admin extends javax.swing.JFrame {
    // Variabel untuk membuat dan menjalankan pernyataan SQL
    Connection con; // Variabel untuk menyimpan koneksi ke database
    Statement st; // Variabel untuk membuat dan menjalankan pernyataan SQL
    ResultSet rs; // Variabel untuk menyimpan hasil eksekusi query SQL

    
    /**
     * Creates new form Admin
     */
    public Admin() {
        initComponents(); // Menginisialisasi komponen GUI
        Koneksi.getKoneksi(); // Membuat koneksi ke database melalui kelas Koneksi
        data(); // Memuat data awal dari database (misalnya, daftar tiket atau pengguna)
        data_harga(); // Memuat data harga dari database (misalnya, harga tiket kereta)
        bayangan1.setVisible(false); // Menyembunyikan elemen GUI bayangan1
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        bayangan1 = new javax.swing.JTextField();
        nama = new javax.swing.JTextField();
        username = new javax.swing.JTextField();
        password = new javax.swing.JPasswordField();
        edit = new javax.swing.JButton();
        btnadmin = new javax.swing.JButton();
        hapus = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        admin = new javax.swing.JTable();
        simpan = new javax.swing.JButton();
        harga = new javax.swing.JTextField();
        kelas = new javax.swing.JTextField();
        status = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableharga = new javax.swing.JTable();
        jLabel8 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        bayangan1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bayangan1ActionPerformed(evt);
            }
        });
        jPanel1.add(bayangan1, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 180, 133, -1));

        nama.setBackground(new java.awt.Color(102, 231, 249));
        nama.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                namaActionPerformed(evt);
            }
        });
        jPanel1.add(nama, new org.netbeans.lib.awtextra.AbsoluteConstraints(162, 190, 260, 31));

        username.setBackground(new java.awt.Color(59, 92, 161));
        username.setForeground(new java.awt.Color(255, 255, 255));
        username.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                usernameActionPerformed(evt);
            }
        });
        jPanel1.add(username, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 280, 260, 31));
        jPanel1.add(password, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 230, 260, 34));

        edit.setBackground(new java.awt.Color(0,0,0,0));
        edit.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        edit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editActionPerformed(evt);
            }
        });
        jPanel1.add(edit, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 390, 100, 40));

        btnadmin.setBackground(new java.awt.Color(0,0,0,0));
        btnadmin.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        btnadmin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnadminActionPerformed(evt);
            }
        });
        jPanel1.add(btnadmin, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 380, 100, 50));

        hapus.setBackground(new java.awt.Color(0,0,0,0));
        hapus.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        hapus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hapusActionPerformed(evt);
            }
        });
        jPanel1.add(hapus, new org.netbeans.lib.awtextra.AbsoluteConstraints(393, 380, 100, 50));

        admin.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "No", "Nama", "Username", "Password"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        admin.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                adminMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(admin);
        if (admin.getColumnModel().getColumnCount() > 0) {
            admin.getColumnModel().getColumn(3).setHeaderValue("Password");
        }

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 470, 350, 180));

        simpan.setBackground(new java.awt.Color(0,0,0,0));
        simpan.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        simpan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                simpanActionPerformed(evt);
            }
        });
        jPanel1.add(simpan, new org.netbeans.lib.awtextra.AbsoluteConstraints(860, 524, 110, 50));

        harga.setBackground(new java.awt.Color(59, 133, 201));
        harga.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hargaActionPerformed(evt);
            }
        });
        jPanel1.add(harga, new org.netbeans.lib.awtextra.AbsoluteConstraints(780, 450, 300, 31));

        kelas.setEditable(false);
        kelas.setBackground(new java.awt.Color(102, 204, 255));
        jPanel1.add(kelas, new org.netbeans.lib.awtextra.AbsoluteConstraints(780, 400, 300, 31));

        status.setEditable(false);
        status.setBackground(new java.awt.Color(204, 204, 255));
        jPanel1.add(status, new org.netbeans.lib.awtextra.AbsoluteConstraints(780, 350, 300, 31));

        tableharga.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "No", "Status", "Kelas", "Harga"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableharga.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablehargaMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tableharga);

        jPanel1.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 180, 440, 120));

        jLabel8.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel8.setText("*Klik untuk mengubah");
        jPanel1.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 320, 164, 20));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/desain/FROM ADMIN.png"))); // NOI18N
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1200, -1));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1170, 700));

        jMenu1.setText("File");

        jMenuItem1.setText("Keluar");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Tiket");
        jMenu2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu2MouseClicked(evt);
            }
        });
        jMenuBar1.add(jMenu2);

        jMenu3.setText("Data Penumpang");
        jMenu3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu3MouseClicked(evt);
            }
        });
        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
    
    private void data_harga(){
     try{
            con = Koneksi.getKoneksi(); // Membuka koneksi ke database menggunakan metode getKoneksi() dari kelas Koneksi.
            String sql1 = "SELECT * FROM harga"; // Query SQL untuk mengambil semua data dari tabel 'harga'.
            st = con.createStatement(); // Membuat objek Statement untuk mengeksekusi query SQL.
            rs = st.executeQuery(sql1); // Menjalankan query SELECT dan menyimpan hasilnya dalam objek ResultSet.
            while(rs.next()){ // Metode rs.next() akan mengarahkan ResultSet ke baris berikutnya, 
                DefaultTableModel model = (DefaultTableModel)  tableharga.getModel(); // Mengambil model tabel dari komponen tableharga dan mengonversinya menjadi DefaultTableModel
                Object[] row = new Object[4]; // Membuat array objek dengan ukuran 4 untuk menampung data dari database
                row[0] = rs.getString("id"); // Mengambil nilai kolom 'id' dan menyimpannya di indeks pertama array
                row[1] = rs.getString("status"); // Mengambil nilai kolom 'status' dan menyimpannya di indeks kedua array
                row[2] = rs.getString("kelas"); // Mengambil nilai kolom 'kelas' dan menyimpannya di indeks ketiga array
                row[3] = rs.getString("harga"); // Mengambil nilai kolom 'harga' dan menyimpannya di indeks keempat array               
                model.addRow(row); // Menambahkan baris data (row) ke model tabel
            }
        }catch(SQLException ex){ // Menampilkan pesan kesalahan yang ramah kepada pengguna
            JOptionPane.showMessageDialog(null, ex);
        }
    }
    
     private void data(){
     try{
            con = Koneksi.getKoneksi(); // Membuka koneksi ke database menggunakan metode getKoneksi() dari kelas Koneksi.
            String sql1 = "SELECT * FROM admin order by id ASC";
            st = con.createStatement();  // Membuat objek Statement untuk mengeksekusi query SQL.
            rs = st.executeQuery(sql1); // Menjalankan query SELECT dan menyimpan hasilnya dalam objek ResultSet.
            while(rs.next()){ // Metode rs.next() akan mengarahkan ResultSet ke baris berikutnya, 
                DefaultTableModel model = (DefaultTableModel) admin.getModel(); // Ambil model tabel
                Object[] row = new Object[4]; // Membuat array objek dengan ukuran 4 untuk menampung data dari database
                row[0] = rs.getString("id"); // Mengambil nilai kolom 'id' dan menyimpannya di indeks pertama array
                row[1] = rs.getString("nama"); // Mengambil nilai kolom 'nama' dari hasil query (ResultSet) dan menyimpannya di indeks pertama (index 1) array row
                row[2] = rs.getString("username"); // Mengambil nilai kolom 'username' dari hasil query (ResultSet) dan menyimpannya di indeks kedua (index 2) array row
                row[3] = rs.getString("password"); // Mengambil nilai kolom 'password' dari hasil query (ResultSet) dan menyimpannya di indeks ketiga (index 3) array row            
                model.addRow(row); // Menambahkan array row sebagai baris baru ke dalam model tabel
            }
        }catch(SQLException ex){ // Menampilkan pesan kesalahan yang ramah kepada pengguna
            JOptionPane.showMessageDialog(null, ex);
        }
    }
    
     private void bersih(){
        nama.setText(""); // Menghapus teks yang ada di komponen 'nama' (misalnya JTextField)
        username.setText(""); // Menghapus teks yang ada di komponen 'username' (misalnya JTextField)
        password.setText(""); // Menghapus teks yang ada di komponen 'password' (misalnya JTextField)
        bayangan1.setText(""); // Menghapus teks yang ada di komponen 'bayangan1' (misalnya JTextField)
        status.setText(""); // Menghapus teks yang ada di komponen 'status' (misalnya JTextField)
        kelas.setText(""); // Menghapus teks yang ada di komponen 'kelas' (misalnya JTextField)
        harga.setText(""); // Menghapus teks yang ada di komponen 'harga' (misalnya JTextField)
     }
    
    private void btnadminActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnadminActionPerformed
        
        try{
            String pass = new String(password.getPassword()); // Mengambil nilai password yang disembunyikan dan mengubahnya menjadi string
            con = Koneksi.getKoneksi(); // Mendapatkan koneksi ke database
            String sql = "INSERT INTO admin (nama,username,password) VALUE('"+nama.getText()+"','"+username.getText()+"','"+pass+"')";
            st = con.createStatement(); // Membuat objek Statement untuk mengeksekusi SQL
            st.execute(sql); // Menjalankan perintah SQL untuk memasukkan data baru ke tabel admin
            JOptionPane.showMessageDialog(null,"Berhasil"); // Menampilkan pesan dialog yang mengindikasikan data berhasil disimpan
            DefaultTableModel model = (DefaultTableModel) admin.getModel(); // Mengambil model tabel admin
            model.setRowCount(0); // Menghapus semua baris dari tabel untuk memuat data terbaru
            data(); // Memuat ulang data ke dalam tabel (mungkin dengan mengambil data terbaru dari database)
           bersih(); // Memanggil fungsi bersih() untuk mengosongkan form input setelah proses update berhasil
        }catch(SQLException e){
            JOptionPane.showMessageDialog(null,e);
        }

    }//GEN-LAST:event_btnadminActionPerformed

    private void adminMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_adminMouseClicked
        int i = admin.getSelectedRow();
        TableModel model = admin.getModel();
        bayangan1.setText(model.getValueAt(i, 0).toString());
        nama.setText(model.getValueAt(i, 1).toString());
        username.setText(model.getValueAt(i, 2).toString());
        password.setText(model.getValueAt(i, 3).toString());
    }//GEN-LAST:event_adminMouseClicked

    private void editActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editActionPerformed
         try{
            String pass = new String(password.getPassword()); // Mengambil nilai password yang disembunyikan dan mengonversinya menjadi string
            con = Koneksi.getKoneksi(); // Mendapatkan koneksi ke database melalui kelas Koneksi
            String sql = "UPDATE admin set nama='"+nama.getText()+"',username='"+username.getText()+"',password='"+pass+"' where id='"+bayangan1.getText()+"'"; // Menyusun query SQL untuk memperbarui data admin berdasarkan id
            st = con.createStatement(); // Membuat objek Statement untuk mengeksekusi query SQL
            st.execute(sql); // Mengeksekusi query SQL untuk memperbarui data admin di database
            JOptionPane.showMessageDialog(null,"Berhasil"); // Menampilkan pesan dialog bahwa proses berhasil
            DefaultTableModel model = (DefaultTableModel) admin.getModel(); // Mendapatkan model tabel yang digunakan oleh JTable admin
            model.setRowCount(0); // Menghapus semua baris yang ada di tabel untuk memuat data terbaru
            data(); // Memanggil fungsi data() untuk memperbarui data pada tabel dengan data terbaru dari database
            bersih(); // Memanggil fungsi bersih() untuk mengosongkan form input setelah proses update berhasil
        }catch(SQLException e){
            JOptionPane.showMessageDialog(null,e);
        }
    }//GEN-LAST:event_editActionPerformed

    private void hapusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hapusActionPerformed
        try{
            String pass = new String(password.getPassword()); // Mengambil nilai password yang disembunyikan dan mengonversinya menjadi string
            con = Koneksi.getKoneksi(); // Mendapatkan koneksi ke database melalui kelas Koneksi
            String sql = "DELETE FROM admin WHERE id='"+bayangan1.getText()+"'"; // Menyusun query SQL untuk menghapus data admin berdasarkan id
            st = con.createStatement(); // Membuat objek Statement untuk mengeksekusi query SQL
            st.execute(sql); // Mengeksekusi query SQL untuk menghapus data admin di database
            JOptionPane.showMessageDialog(null,"Berhasil"); // Menampilkan pesan dialog bahwa proses penghapusan berhasil
            DefaultTableModel model = (DefaultTableModel) admin.getModel(); // Mendapatkan model tabel yang digunakan oleh JTable admin
            model.setRowCount(0); // Menghapus semua baris yang ada di tabel untuk memuat data terbaru
            data(); // Memanggil fungsi data() untuk memperbarui data pada tabel dengan data terbaru dari database
            bersih(); // Memanggil fungsi bersih() untuk mengosongkan form input setelah proses penghapusan selesai
        }catch(SQLException e){
            JOptionPane.showMessageDialog(null,e);
        }
    }//GEN-LAST:event_hapusActionPerformed

    private void simpanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_simpanActionPerformed
         try{
            String pass = new String(password.getPassword()); // Mengambil nilai password yang disembunyikan dan mengonversinya menjadi string
            con = Koneksi.getKoneksi(); // Mendapatkan koneksi ke database melalui kelas Koneksi
            String sql = "UPDATE harga set harga='"+harga.getText()+"' where id='"+bayangan1.getText()+"'"; // Menyusun query SQL untuk memperbarui harga berdasarkan id
            st = con.createStatement(); // Membuat objek Statement untuk mengeksekusi query SQL
            st.execute(sql); // Mengeksekusi query SQL untuk memperbarui harga di database
            JOptionPane.showMessageDialog(null,"Berhasil"); // Menampilkan pesan dialog bahwa proses pembaruan berhasil
            DefaultTableModel model = (DefaultTableModel) tableharga.getModel(); // Mendapatkan model tabel yang digunakan oleh JTable tableharga
            model.setRowCount(0); // Menghapus semua baris yang ada di tabel untuk memuat data terbaru
            data_harga(); // Memanggil fungsi data_harga() untuk memperbarui data pada tabel dengan data terbaru dari database
            bersih(); // Memanggil fungsi bersih() untuk mengosongkan form input setelah proses pembaruan selesai
        }catch(SQLException e){
            JOptionPane.showMessageDialog(null,e);
        }
    }//GEN-LAST:event_simpanActionPerformed

    private void tablehargaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablehargaMouseClicked
        int i = tableharga.getSelectedRow(); // Mendapatkan index baris yang dipilih pada tabel tableharga
        TableModel model = tableharga.getModel(); // Mendapatkan model tabel yang digunakan oleh JTable tableharga
        bayangan1.setText(model.getValueAt(i, 0).toString()); // Menampilkan nilai kolom pertama (ID) ke komponen bayangan1
        status.setText(model.getValueAt(i, 1).toString()); // Menampilkan nilai kolom kedua (Status) ke komponen status
        kelas.setText(model.getValueAt(i, 2).toString()); // Menampilkan nilai kolom ketiga (Kelas) ke komponen kelas
        harga.setText(model.getValueAt(i, 3).toString()); // Menampilkan nilai kolom keempat (Harga) ke komponen harga
    }//GEN-LAST:event_tablehargaMouseClicked

    private void jMenu2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu2MouseClicked
        new Home().setVisible(true); // Membuka tampilan (window) baru dari kelas Home dan menampilkan jendela tersebut
        dispose(); // Menutup (dispose) jendela atau form saat ini
    }//GEN-LAST:event_jMenu2MouseClicked

    private void jMenu3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu3MouseClicked
        new Penumpang().setVisible(true); // Membuka tampilan (window) baru dari kelas Penumpang dan menampilkan jendela tersebut
        dispose(); // Menutup (dispose) jendela atau form saat ini
    }//GEN-LAST:event_jMenu3MouseClicked

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        this.dispose();  // Menutup jendela Login
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void bayangan1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bayangan1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_bayangan1ActionPerformed

    private void namaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_namaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_namaActionPerformed

    private void hargaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hargaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_hargaActionPerformed

    private void usernameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_usernameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_usernameActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Admin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Admin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Admin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Admin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Admin().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable admin;
    private javax.swing.JTextField bayangan1;
    private javax.swing.JButton btnadmin;
    private javax.swing.JButton edit;
    private javax.swing.JButton hapus;
    private javax.swing.JTextField harga;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField kelas;
    private javax.swing.JTextField nama;
    private javax.swing.JPasswordField password;
    private javax.swing.JButton simpan;
    private javax.swing.JTextField status;
    private javax.swing.JTable tableharga;
    private javax.swing.JTextField username;
    // End of variables declaration//GEN-END:variables
}

