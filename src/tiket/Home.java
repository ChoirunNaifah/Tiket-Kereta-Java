/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package tiket;

import com.mysql.jdbc.Connection;   //digunnakan untuk membuat koneksi ke database
import java.awt.event.KeyEvent; // kode ini merupakan perintah untuk mengimpor atau membawa masuk sebuah kelas bernama KeyEvent dari suatu paket (atau library) yang bernama java.awt.event 
import java.sql.ResultSet; // Kelas ini khusus untuk menyimpan hasil pencarian dari database.
import java.sql.SQLException; // kelas yang digunakan untuk memberi peringatan saat ada kesalahan
import java.util.Date; // kunci yang bisa bekerja dengan tanggal dan waktu dalam program Java 
import java.sql.Statement; // digunakan untuk mengendalikan database dan melakukan berbagai operasi pada data di dalamnya
import java.util.HashMap; // kode ini digunakan untuk pengaksesan cepat berdasarkan kunci
import javax.swing.JOptionPane; // kode ini digunakan untuk menampilkan dialog grafis, seperti kotak pesan, input, atau konfirmasi di aplikasi GUI.
import net.sf.jasperreports.engine.JasperFillManager; // kode ini digunakan untuk mengisi laporan (report) dengan data dari sumber tertentu(database, koleksi data, atau objek java).
import net.sf.jasperreports.engine.JasperPrint; // kode ini menyimpan informasi laporan, seperti halaman, konten dan paramater yang digunakan untuk ditampilkan, dicetak, atau diekspor ke berbagai format.
import net.sf.jasperreports.view.JasperViewer; // kelas ini digunakan untuk memeriksa laporan yang telah diisi sebelum mencetak atau mengekspornya ke format tertentu.

/**
 *
 * @author DELL
 */
public class Home extends javax.swing.JFrame {

   //Deklarasi variabel untuk koneksi ke database
    Connection con; //Objek yang digunakan untuk membuat koneksi ke database
    Statement st; // Objek yang digunakan untuk mengeksekusi query SQL (misalnya SELECT, INSERT, UPDATE)
    ResultSet rs; //// Objek yang digunakan untuk menyimpan hasil dari query SELECT
    
    /**
     * Creates new form Home
     */
    public Home() {
        initComponents(); // metode untuk menginisialisasi dan menata semua komponen antarmuka pengguna (GUI) 
        Koneksi.getKoneksi();  // membuat koneksi ke database mengggunakan metode yang telah didefinnisikan di kelas koneksi.
        fnama.requestFocus(); // digunakan untuk membuat koneksi ke database.
        bayangan1.setVisible(false); // Menyimpan total harga tiket dewasa berdasarkan jumlah tiket dan harga per tiket.
        bayangan2.setVisible(false); // Menyimpan total harga keseluruhan (tiket dewasa + anak) untuk perhitungan, seperti kembalian.
        bayangan3.setVisible(false); // Tidak memiliki fungsi yang jelas
        bayangan4.setVisible(false); //Komponen JSpinner untuk memilih jumlah tiket dewasa yang dipesan.
        bayangan5.setVisible(false); //Menyimpan jenis gerbong yang dipilih untuk referensi atau perhitungan harga.
        // kode bayangan di atas untuk menyembunyikan komponen-komponen yang bernama bayangan1 hingga bayangan5. 
        
       
        
//        Mmbuat ID Penumpang Otomatis
        autoid();
//        Memanggil Nama Kereta Api
//        kereta();
//        Mengambil Tanggal Sekarang
        Date date = new Date();
        tanggal.setDate(date); 
//        Memanggil Data Kelas
       // kelas();
      // harga1();
      
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        fnama = new javax.swing.JTextField();
        stasiun_tujuan = new javax.swing.JComboBox<>();
        sanak = new javax.swing.JSpinner();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        fid = new javax.swing.JTextField();
        ckereta = new javax.swing.JComboBox<>();
        sdewasa = new javax.swing.JSpinner();
        fbayar = new javax.swing.JTextField();
        cgerbong = new javax.swing.JComboBox<>();
        ltotal = new javax.swing.JLabel();
        lkembali = new javax.swing.JLabel();
        tanggal = new com.toedter.calendar.JDateChooser();
        falamat = new javax.swing.JTextField();
        bayangan5 = new javax.swing.JTextField();
        hdewasa = new javax.swing.JLabel();
        hanak = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        stasiun_awal = new javax.swing.JTextField();
        berangkat = new javax.swing.JLabel();
        tiba = new javax.swing.JLabel();
        bayangan1 = new javax.swing.JTextField();
        bayangan2 = new javax.swing.JTextField();
        bayangan3 = new javax.swing.JTextField();
        bayangan4 = new javax.swing.JSpinner();
        btnsimpan = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        fnama.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jPanel2.add(fnama, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 180, 230, -1));

        stasiun_tujuan.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        stasiun_tujuan.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Surabaya Gubeng (SGU)", "Gambir (GMR)", "Solo Balapan (SLO)", "Semarang Tawang (SMT)", "Banjar (BJR)" }));
        jPanel2.add(stasiun_tujuan, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 340, 230, -1));

        sanak.setModel(new javax.swing.SpinnerNumberModel(0, 0, 10, 1));
        sanak.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                anak(evt);
            }
        });
        jPanel2.add(sanak, new org.netbeans.lib.awtextra.AbsoluteConstraints(850, 220, 54, 28));

        jLabel9.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel9.setText("Rp.");
        jPanel2.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(920, 180, -1, -1));

        jLabel10.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel10.setText("Rp.");
        jPanel2.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(920, 230, -1, -1));

        fid.setEditable(false);
        fid.setBackground(new java.awt.Color(119, 213, 246));
        fid.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jPanel2.add(fid, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 130, 230, -1));

        ckereta.setBackground(new java.awt.Color(119, 213, 246));
        ckereta.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        ckereta.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "", "Argo Wilis", "Argo Parahyangan", "Lodaya" }));
        ckereta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ckeretaActionPerformed(evt);
            }
        });
        jPanel2.add(ckereta, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 390, 230, -1));

        sdewasa.setModel(new javax.swing.SpinnerNumberModel(0, 0, 10, 1));
        sdewasa.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                dewasa(evt);
            }
        });
        jPanel2.add(sdewasa, new org.netbeans.lib.awtextra.AbsoluteConstraints(850, 170, 54, 28));

        fbayar.setBackground(new java.awt.Color(119, 213, 246));
        fbayar.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        fbayar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fbayarActionPerformed(evt);
            }
        });
        fbayar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                bayar(evt);
            }
        });
        jPanel2.add(fbayar, new org.netbeans.lib.awtextra.AbsoluteConstraints(840, 330, 196, -1));

        cgerbong.setBackground(new java.awt.Color(119, 213, 246));
        cgerbong.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        cgerbong.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " ", "Eksekutif 1", "Eksekutif 2", "Ekonomi 1", "Ekonomi 2", "Ekonomi 3" }));
        cgerbong.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                kelas(evt);
            }
        });
        jPanel2.add(cgerbong, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 440, 230, -1));

        ltotal.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        ltotal.setText("0");
        jPanel2.add(ltotal, new org.netbeans.lib.awtextra.AbsoluteConstraints(840, 270, 196, 30));

        lkembali.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        lkembali.setText("0");
        jPanel2.add(lkembali, new org.netbeans.lib.awtextra.AbsoluteConstraints(850, 380, 196, 30));
        jPanel2.add(tanggal, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 117, 420, 30));

        falamat.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jPanel2.add(falamat, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 230, 230, -1));

        bayangan5.setEditable(false);
        bayangan5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bayangan5ActionPerformed(evt);
            }
        });
        jPanel2.add(bayangan5, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 480, 95, -1));

        hdewasa.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        hdewasa.setText("0");
        jPanel2.add(hdewasa, new org.netbeans.lib.awtextra.AbsoluteConstraints(950, 180, 100, -1));

        hanak.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        hanak.setText("0");
        jPanel2.add(hanak, new org.netbeans.lib.awtextra.AbsoluteConstraints(950, 230, 105, -1));

        jLabel25.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel25.setText("/ Org");
        jPanel2.add(jLabel25, new org.netbeans.lib.awtextra.AbsoluteConstraints(1070, 180, -1, -1));

        jLabel26.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel26.setText("/ Org");
        jPanel2.add(jLabel26, new org.netbeans.lib.awtextra.AbsoluteConstraints(1070, 230, -1, -1));

        stasiun_awal.setEditable(false);
        stasiun_awal.setBackground(new java.awt.Color(119, 213, 246));
        stasiun_awal.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        stasiun_awal.setText("Bandung (BD)");
        stasiun_awal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stasiun_awalActionPerformed(evt);
            }
        });
        jPanel2.add(stasiun_awal, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 280, 230, -1));

        berangkat.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        berangkat.setText("00.00 WIB");
        jPanel2.add(berangkat, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 280, -1, 30));

        tiba.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        tiba.setText("00.00 WIB");
        jPanel2.add(tiba, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 340, -1, 30));

        bayangan1.setEditable(false);
        bayangan1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bayangan1ActionPerformed(evt);
            }
        });
        jPanel2.add(bayangan1, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 480, 95, -1));

        bayangan2.setEditable(false);
        jPanel2.add(bayangan2, new org.netbeans.lib.awtextra.AbsoluteConstraints(840, 480, 95, -1));

        bayangan3.setEditable(false);
        jPanel2.add(bayangan3, new org.netbeans.lib.awtextra.AbsoluteConstraints(970, 480, 95, -1));

        bayangan4.setModel(new javax.swing.SpinnerNumberModel(0, 0, 10, 1));
        bayangan4.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                bayangan4dewasa(evt);
            }
        });
        jPanel2.add(bayangan4, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 440, 51, 28));

        btnsimpan.setBackground(new java.awt.Color(0,0,0,0));
        btnsimpan.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        btnsimpan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                simpan(evt);
            }
        });
        jPanel2.add(btnsimpan, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 560, 290, 59));

        jLabel8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/desain/FROM HOME TRAIN (1).png"))); // NOI18N
        jPanel2.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, 710));

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1170, 710));

        jMenu1.setText("Admin");

        jMenuItem1.setText("Menu Admin");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setText("Keluar");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Penumpang");
        jMenu2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                laporan(evt);
            }
        });
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
  
    
   private void autoid(){
       try{
            con = Koneksi.getKoneksi(); // Membuat koneksi ke database.
            String sql = "SELECT COUNT(id) as kode FROM penumpang"; // Membuat query SQL untuk menghitung jumlah baris pada tabel "penumpang".
            st = con.createStatement(); // Membuat objek Statement untuk menjalankan query.
            rs = st.executeQuery(sql); // Menjalankan query dan menyimpan hasilnya dalam ResultSet.
            while(rs.next()){ // Mengulang selama masih ada data dalam ResultSet.
                String kode = rs.getString("kode"); // Mengambil nilai jumlah baris dari ResultSet.
                int a = Integer.parseInt(kode); // Mengubah nilai jumlah baris menjadi integer.
                int b = a+1; // Menambahkan 1 untuk mendapatkan ID baru.
                fid.setText("."+b); // Menampilkan ID baru pada komponen.
            }
        }catch(SQLException e){
            JOptionPane.showMessageDialog(null,e);
        }
    }
 
 
    private void laporan(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_laporan
        new menu2().setVisible(true);
        dispose();
    }//GEN-LAST:event_laporan

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        new menu1().setVisible(true);
        dispose();
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        dispose();
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void simpan(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_simpan

        try{
            con = Koneksi.getKoneksi();
            String sql = "INSERT INTO penumpang VALUES('"+fid.getText()+"','"+fnama.getText()+"','"+falamat.getText()+"','"+stasiun_awal.getText()+"','"+stasiun_tujuan.getSelectedItem()+"','"+berangkat.getText()+"','"+tiba.getText()+"','"+tanggal.getDate()+"','"+ckereta.getSelectedItem()+"','"+cgerbong.getSelectedItem()+"','"+sdewasa.getValue()+"','"+sanak.getValue()+"','"+ltotal.getText()+"')";
            st = con.createStatement();
            st.execute(sql);
            this.dispose();
            Index.oke();

            String reportName = "src/report/Tiket.jasper";
            HashMap parameter = new HashMap();
            parameter.put("per_id",this.fid.getText());
            JasperPrint jPrint = JasperFillManager.fillReport(reportName, parameter, Koneksi.getKoneksi());
            JasperViewer.viewReport(jPrint, false);

        }catch(Exception e){
            JOptionPane.showMessageDialog(null,e);
        }
    }//GEN-LAST:event_simpan

    private void bayangan4dewasa(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_bayangan4dewasa

    }//GEN-LAST:event_bayangan4dewasa

    private void bayangan1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bayangan1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_bayangan1ActionPerformed

    private void stasiun_awalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stasiun_awalActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_stasiun_awalActionPerformed

    private void bayangan5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bayangan5ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_bayangan5ActionPerformed

    private void kelas(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_kelas

        if(cgerbong.getSelectedItem().equals("Eksekutif 1")){ // Mengecek apakah jenis gerbong yang dipilih adalah "Eksekutif 1"
            bayangan5.setText("eksekutif1"); // Menetapkan nilai "eksekutif1" pada komponen 'bayangan5'
        }else if(cgerbong.getSelectedItem().equals("Eksekutif 2")){ // Mengecek apakah jenis gerbong yang dipilih adalah "Eksekutif 2"
            bayangan5.setText("eksekutif2"); // Menetapkan nilai "eksekutif2" pada komponen 'bayangan5'
        }else if(cgerbong.getSelectedItem().equals("Ekonomi 1")){ // Mengecek apakah jenis gerbong yang dipilih adalah "Ekonomi 1"
            bayangan5.setText("ekonomi1");  // Menetapkan nilai "ekonomi1" pada komponen 'bayangan5'
        }else if(cgerbong.getSelectedItem().equals("Ekonomi 2")){ // Mengecek apakah jenis gerbong yang dipilih adalah "Ekonomi 2"
            bayangan5.setText("ekonomi2"); // Menetapkan nilai "ekonomi2" pada komponen 'bayangan5'
        }else if(cgerbong.getSelectedItem().equals("Ekonomi 3")){ // Mengecek apakah jenis gerbong yang dipilih adalah "Ekonomi 3"
            bayangan5.setText("ekonomi3"); // Menetapkan nilai "ekonomi3" pada komponen 'bayangan5'
        }
        
        // Membuat koneksi ke database menggunakan metode dari skelas Koneksi
        con = Koneksi.getKoneksi();
        
        // Memeriksa apakah gerbong yang dipilih adalah "Eksekutif 1" atau "Eksekutif 2"
        if((cgerbong.getSelectedItem().equals("Eksekutif 1")) || (cgerbong.getSelectedItem().equals("Eksekutif 2"))){
            try{    
                st = con.createStatement(); // Membuat statement untuk menjalankan query SQL
                
                 // Query SQL untuk mendapatkan harga dewasa berdasarkan ID gerbong
                String sql1 = "SELECT * FROM harga WHERE id='1'";
                rs = st.executeQuery(sql1);  // Menjalankan query dan menyimpan hasilnya dalam ResultSet
                while(rs.next()){ // Mengiterasi hasil query
                    hdewasa.setText(rs.getString("harga")); // Menampilkan harga dewasa pada komponen 'hdewasa'
                }
            
                // Query SQL untuk mendapatkan harga anak-anak berdasarkan ID gerbong
                String sql2 = "SELECT * FROM harga WHERE id='2'";
                rs = st.executeQuery(sql2);  // Menjalankan query kedua
                while(rs.next()){ // Mengiterasi hasil query kedua
                    hanak.setText(rs.getString("harga")); // Menampilkan harga anak-anak pada komponen 'hanak'
                }
        }catch(SQLException e){ // Menangkap dan menangani kesalahan yang mungkin terjadi selama eksekusi
            JOptionPane.showMessageDialog(null,e);
        }
            
        // Memeriksa apakah gerbong yang dipilih adalah "Ekonomi 1", "Ekonomi 2", atau "Ekonomi 3"
        }else if((cgerbong.getSelectedItem().equals("Ekonomi 1")) || (cgerbong.getSelectedItem().equals("Ekonomi 2")) || (cgerbong.getSelectedItem().equals("Ekonomi 3"))){
            try{ // Membuat statement untuk menjalankan query SQL
                st = con.createStatement();
                
                // Query SQL untuk mendapatkan harga dewasa berdasarkan ID gerbong
                String sql1 = "SELECT * FROM harga WHERE id='3'";
                rs = st.executeQuery(sql1); // Menjalankan query dan menyimpan hasilnya dalam ResultSet
                while(rs.next()){ // Mengiterasi hasil query
                    hdewasa.setText(rs.getString("harga")); // Menampilkan harga dewasa pada komponen 'hdewasa'
                }
            // Query SQL untuk mendapatkan harga anak-anak berdasarkan ID gerbong
                String sql2 = "SELECT * FROM harga WHERE id='4'";
                rs = st.executeQuery(sql2);  // Menjalankan query kedua
                while(rs.next()){ // Mengiterasi hasil query kedua
                    hanak.setText(rs.getString("harga")); // Menampilkan harga anak-anak pada komponen 'hanak'
        
                }
        }catch(SQLException e){ // Menampilkan harga anak-anak pada komponen 'hanak'
            JOptionPane.showMessageDialog(null,e);  // Memberikan notifikasi kesalahan kepada pengguna
        }
      }
    }//GEN-LAST:event_kelas

    private void bayar(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_bayar
    if(evt.getKeyCode()==KeyEvent.VK_ENTER){ // Mengecek apakah tombol yang ditekan adalah ENTER.
          if(sanak.getValue().equals(0)){  // Mengecek apakah nilai spinner 'sanak' adalah 0 (tidak ada tiket anak yang dipesan).
            int a = Integer.parseInt(bayangan1.getText()); // Mengambil nilai total harga dari komponen 'bayangan1' (total harga dewasa) dan mengonversinya ke integer.
            int b = Integer.parseInt(fbayar.getText()); // Mengambil nilai pembayaran dari komponen 'fbayar' (input pembayaran) dan mengonversinya ke integer.
            int c = b-a; // Menghitung kembalian dengan mengurangi total harga dewasa (a) dari jumlah pembayaran (b).
            lkembali.setText("Rp. "+c);  // Menampilkan hasil perhitungan kembalian di komponen 'lkembali' (label untuk menampilkan kembalian).
          }else{
            int a = Integer.parseInt(bayangan2.getText());  // Mengambil nilai total harga dari komponen 'bayangan2' (total harga dewasa + anak) dan mengonversinya ke integer.
            int b = Integer.parseInt(fbayar.getText());  // Mengambil nilai pembayaran dari komponen 'fbayar' (input pembayaran) dan mengonversinya ke integer.
            int c = b-a; // Menghitung kembalian dengan mengurangi total harga dewasa + anak (a) dari jumlah pembayaran (b).
            lkembali.setText("Rp. "+c); // Menampilkan hasil perhitungan kembalian di komponen 'lkembali'.
          }
      }
    }//GEN-LAST:event_bayar

    private void fbayarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fbayarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fbayarActionPerformed

    private void dewasa(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_dewasa
        int a = (int) sdewasa.getValue(); // Mengambil nilai dari komponen spinner 'sdewasa' (biasanya berupa angka) dan mengonversinya ke tipe data integer.
        int b = Integer.parseInt(hdewasa.getText()); // mengonversinya dari String menjadi integer. 
        int c = a*b; // Menghitung total harga dengan mengalikan jumlah dewasa (a) dengan harga per orang (b).
        ltotal.setText("Rp. "+c); // Menampilkan hasil total harga (c) di komponen 'ltotal', biasanya berupa label.
        bayangan1.setText(""+c); // Menampilkan hasil total harga (c) di komponen 'bayangan1'. 
        
    }//GEN-LAST:event_dewasa

    private void ckeretaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ckeretaActionPerformed
     //program ini digunakan untuk menampilkan jadwal keberangkatan dan kedatangan kereta
        if(ckereta.getSelectedItem().equals("Argo Wilis")){ //Mengatur nilai bayangan4 untuk kereta "Argo Wilis"
        bayangan4.setValue(1);
        ckereta.setSelectedIndex(1);  
       }else if(ckereta.getSelectedItem().equals("Argo Parahyangan")){ // Mengecek apakah item yang dipilih adalah "Argo Parahyangan".
       bayangan4.setValue(2); // Mengatur nilai 'bayangan4' menjadi 2, merepresentasikan kereta "Argo Parahyangan".
       ckereta.setSelectedIndex(2); 
       }
       else if(ckereta.getSelectedItem().equals("Lodaya")){ // Mengecek apakah item yang dipilih adalah "Lodaya".
       bayangan4.setValue(3);  // Mengatur nilai 'bayangan4' menjadi 3, merepresentasikan kereta "Lodaya".
       ckereta.setSelectedIndex(3); 
       }
       
       if(ckereta.getSelectedItem().equals("Argo Wilis") && stasiun_tujuan.getSelectedItem().equals("Surabaya Gubeng (SGU)")){ // Mengecek apakah kereta yang dipilih adalah "Argo Wilis" dan stasiun tujuan adalah "Surabaya Gubeng (SGU)"
            berangkat.setText("08.30 WIB"); // Menampilkan jadwal keberangkatan 
            tiba.setText("20.19 WITA"); // Menampilkan jadwal tiba pukul 20.19 WITA 
        }else if(ckereta.getSelectedItem().equals("Argo Wilis") && stasiun_tujuan.getSelectedItem().equals("Gambir (GMR)")){ // Mengecek apakah kereta yang dipilih adalah "Argo Wilis" dan stasiun tujuan adalah "Gambir (GMR)"
            berangkat.setText("06.30 WIB");  // Menampilkan jadwal keberangkatan 
            tiba.setText("09.45 WIB"); // Menampilkan jadwal tiba pukul 09.45 WIB 
        }else if(ckereta.getSelectedItem().equals("Argo Wilis") && stasiun_tujuan.getSelectedItem().equals("Solo Balapan (SLO)")){ // Mengecek apakah kereta yang dipilih adalah "Argo Wilis" dan stasiun tujuan adalah "Solo Balapan (SLO)"
            berangkat.setText("07.20 WIB"); // Menampilkan jadwal keberangkatan
            tiba.setText("16.15 WITA"); // Menampilkan jadwal tiba pukul 16.15 
        }else if(ckereta.getSelectedItem().equals("Argo Wilis") && stasiun_tujuan.getSelectedItem().equals("Semarang Tawang (SMT)")){ // Mengecek apakah kereta yang dipilih adalah "Argo Wilis" dan stasiun tujuan adalah "Semarang Tawang (SMT)"
            berangkat.setText("06.15 WIB"); // Menampilkan jadwal keberangkatan 
            tiba.setText("13.45 WITA"); // Menampilkan jadwal tiba pukul 13.45 WITA 
        }else if(ckereta.getSelectedItem().equals("Argo Wilis") && stasiun_tujuan.getSelectedItem().equals("Banjar (BJR)")){ // Mengecek apakah kereta yang dipilih adalah "Argo Wilis" dan stasiun tujuan adalah "Banjar (BJR)"
            berangkat.setText("09.10 WIB");  // Menampilkan jadwal keberangkatan
            tiba.setText("13.03 WITA"); // Menampilkan jadwal tiba pukul 13.03 WITA 
            
            //Argo Parahyangan
        }else if(ckereta.getSelectedItem().equals("Argo Parahyangan") && stasiun_tujuan.getSelectedItem().equals("Surabaya Gubeng (SGU)")){ // Mengecek apakah kereta yang dipilih adalah "Argo Parahyangan" dan stasiun tujuan adalah "Surabaya Gubeng (SGU)"
            berangkat.setText("07.30 WIB"); // Menampilkan jadwal keberangkatan 
            tiba.setText("19.19 WITA"); // Menampilkan jadwal tiba pukul 19.19 WITA
        }else if(ckereta.getSelectedItem().equals("Argo Parahyangan") && stasiun_tujuan.getSelectedItem().equals("Gambir (GMR)")){  // Mengecek apakah kereta yang dipilih adalah "Argo Parahyangan" dan stasiun tujuan adalah "Gambir (GMR)"
            berangkat.setText("08.30 WIB"); // Menampilkan jadwal keberangkatan 
            tiba.setText("11.45 WIB");     // Menampilkan jadwal tiba pukul 11.45 WIB 
        }else if(ckereta.getSelectedItem().equals("Argo Parahyangan") && stasiun_tujuan.getSelectedItem().equals("Solo Balapan (SLO)")){ // Mengecek apakah kereta yang dipilih adalah "Argo Parahyangan" dan stasiun tujuan adalah "Solo Balapan (SLO)"
            berangkat.setText("09.20 WIB"); // Menampilkan jadwal keberangkatan 
            tiba.setText("18.15 WITA"); // Menampilkan jadwal tiba pukul 18.15 WITA 
        }else if(ckereta.getSelectedItem().equals("Argo Parahyangan") && stasiun_tujuan.getSelectedItem().equals("Semarang Tawang (SMT)")){ // Mengecek apakah kereta yang dipilih adalah "Argo Parahyangan" dan stasiun tujuan adalah "Semarang Tawang (SMT)"
            berangkat.setText("08.15 WIB"); // Menampilkan jadwal keberangkatan
            tiba.setText("15.45 WITA");  // Menampilkan jadwal tiba pukul 15.45 WITA 
        }else if(ckereta.getSelectedItem().equals("Argo Parahyangan") && stasiun_tujuan.getSelectedItem().equals("Banjar (BJR)")){ // Mengecek apakah kereta yang dipilih adalah "Argo Parahyangan" dan stasiun tujuan adalah "Banjar (BJR)"
            berangkat.setText("10.10 WIB"); // Menampilkan jadwal keberangkatan
            tiba.setText("14.03 WITA"); // Menampilkan jadwal tiba pukul 14.03 WITA

            
            //Lodaya
        }else if(ckereta.getSelectedItem().equals("Lodaya") && stasiun_tujuan.getSelectedItem().equals("Surabaya Gubeng (SGU)")){ // Mengecek apakah kereta yang dipilih adalah "Lodaya" dan stasiun tujuan adalah "Surabaya Gubeng (SGU)"
            berangkat.setText("08.15 WIB");  // Menampilkan jadwal keberangkatan 
            tiba.setText("20.05 WITA"); // Menampilkan jadwal tiba pukul 20.05 WITA
        }else if(ckereta.getSelectedItem().equals("Lodaya") && stasiun_tujuan.getSelectedItem().equals("Gambir (GMR)")){ // Mengecek apakah kereta yang dipilih adalah "Lodaya" dan stasiun tujuan adalah "Gambir (GMR)"
            berangkat.setText("10.30 WIB"); // Menampilkan jadwal keberangkatan 
            tiba.setText("14.45 WIB");  // Menampilkan jadwal tiba pukul 14.45 WIB
        }else if(ckereta.getSelectedItem().equals("Lodaya") && stasiun_tujuan.getSelectedItem().equals("Solo Balapan (SLO)")){ // Mengecek apakah kereta yang dipilih adalah "Lodaya" dan stasiun tujuan adalah "Solo Balapan (SLO)"
            berangkat.setText("07.20 WIB"); // Menampilkan jadwal keberangkatan 
            tiba.setText("14.15 WITA"); // Menampilkan jadwal tiba pukul 14.15 WITA 
        }else if(ckereta.getSelectedItem().equals("Lodaya") && stasiun_tujuan.getSelectedItem().equals("Semarang Tawang (SMT)")){ // Mengecek apakah kereta yang dipilih adalah "Lodaya" dan stasiun tujuan adalah "Semarang Tawang (SMT)"
            berangkat.setText("07.15 WIB"); // Menampilkan jadwal keberangkatan 
            tiba.setText("14.45 WITA"); // Menampilkan jadwal tiba pukul 14.45 WITA 
        }else if(ckereta.getSelectedItem().equals("Lodaya") && stasiun_tujuan.getSelectedItem().equals("Banjar (BJR)")){     // Mengecek apakah kereta yang dipilih adalah "Lodaya" dan stasiun tujuan adalah "Banjar (BJR)"
            berangkat.setText("09.10 WIB");    // Menampilkan jadwal keberangkatan 
            tiba.setText("13.07 WITA"); // Menampilkan jadwal tiba pukul 13.07 WITA 
        }
    }//GEN-LAST:event_ckeretaActionPerformed

    private void anak(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_anak
      int a = Integer.parseInt(bayangan1.getText()); // Mengambil nilai dari komponen 'bayangan1' (biasanya berupa teks), 
      int m = Integer.parseInt(hanak.getText()); // Mengambil teks dari komponen 'hanak' (harga tiket anak), 
      int b = (int) sanak.getValue(); // Mengambil nilai dari komponen spinner 'sanak' (jumlah anak), 
      int c = b*m; // Menghitung total harga tiket anak dengan mengalikan jumlah anak (b) dengan harga per anak (m).
      int d = c+a; // Menjumlahkan total harga tiket anak (c) dengan total harga sebelumnya (a).
      ltotal.setText("Rp. "+d); // Menampilkan total harga keseluruhan (d) di komponen 'ltotal' (kemungkinan label untuk menampilkan hasil).
      bayangan2.setText(""+d); // Menyimpan total harga keseluruhan (d) di komponen 'bayangan2' (mungkin untuk keperluan internal atau data tersembunyi).
    
    }//GEN-LAST:event_anak

  
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        
        
        
        
        
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Home().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField bayangan1;
    private javax.swing.JTextField bayangan2;
    private javax.swing.JTextField bayangan3;
    private javax.swing.JSpinner bayangan4;
    private javax.swing.JTextField bayangan5;
    private javax.swing.JLabel berangkat;
    private javax.swing.JButton btnsimpan;
    private javax.swing.JComboBox<String> cgerbong;
    private javax.swing.JComboBox<String> ckereta;
    private javax.swing.JTextField falamat;
    private javax.swing.JTextField fbayar;
    private javax.swing.JTextField fid;
    private javax.swing.JTextField fnama;
    private javax.swing.JLabel hanak;
    private javax.swing.JLabel hdewasa;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JLabel lkembali;
    private javax.swing.JLabel ltotal;
    private javax.swing.JSpinner sanak;
    private javax.swing.JSpinner sdewasa;
    private javax.swing.JTextField stasiun_awal;
    private javax.swing.JComboBox<String> stasiun_tujuan;
    private com.toedter.calendar.JDateChooser tanggal;
    private javax.swing.JLabel tiba;
    // End of variables declaration//GEN-END:variables
}
